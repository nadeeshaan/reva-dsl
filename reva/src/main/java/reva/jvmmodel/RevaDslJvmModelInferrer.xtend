/*
 * generated by Xtext 2.33.0
 */
package reva.jvmmodel

import com.google.inject.Inject
import java.util.Random
import org.eclipse.xtext.common.types.JvmGenericType
import org.eclipse.xtext.common.types.JvmVisibility
import org.eclipse.xtext.xbase.jvmmodel.AbstractModelInferrer
import org.eclipse.xtext.xbase.jvmmodel.IJvmDeclaredTypeAcceptor
import org.eclipse.xtext.xbase.jvmmodel.IJvmModelAssociations
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder
import reva.revaDsl.Model

class RevaDslJvmModelInferrer extends AbstractModelInferrer {

	@Inject
	extension JvmTypesBuilder

	@Inject
	IJvmModelAssociations associations;

	def dispatch void infer(Model model, IJvmDeclaredTypeAcceptor acceptor, boolean isPreIndexingPhase) {
		var className = new Random().nextInt(Integer.MAX_VALUE) + "Clazz"
		acceptor.accept(model.toClass(className)) [
			addExecuteMethod(model)
			addMainMethod(model)
		]
	}

	private def addMainMethod(JvmGenericType it, Model model) {
		members += model.toMethod("main", typeRef(void)) [
			parameters += model.toParameter("args", typeRef(String).addArrayTypeDimension)
			body = '''
				new «model.className»().execute();
			'''
		]
	}

	private def addExecuteMethod(JvmGenericType it, Model model) {
		members += model.toMethod("execute", typeRef(void)) [
			visibility = JvmVisibility.PRIVATE
			body = model
		]
	}

	private def String getClassName(Model model) {
		val jvmGenericType = associations.getJvmElements(model).
			findFirst[it instanceof JvmGenericType] as JvmGenericType
		return jvmGenericType.identifier
	}
}
